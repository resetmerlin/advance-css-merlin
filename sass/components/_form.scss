.form{
    &__group:not(:last-child){
        margin-bottom: 2rem;

    }
    &__input{

        font-size:1.5rem ;
        font-family: inherit;
        // So you know that usually all elements,

        // they automatically inherit the font family,but not the input elements and so we set it manual here,


        padding: 1.5rem 2rem;
        border-radius: 2px;
        background-color: rgba($color-white,.5);
        border: none;
        color: inherit;
        border-bottom: 3px solid transparent;
        width: 90%;
        display: block;
        &::-webkit-input-placeholder{
            // this right now will only work on Safari and Chrome
            color: $color-grey-dark-2;
        }
        &:focus:invalid{
            border-bottom: 3px solid $color-secondary-dark;
        }
        &:focus{
            outline: none;
            box-shadow: 0 1rem 2rem rgba($color-black,.1);
            border-bottom: 3px solid $color-primary;
        }
        transition: all .3s;


    }


    &__label{
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .3s;
    }

    &__input:placeholder-shown + &__label{
        // So when the placeholder is shown on the input element,then we can (mumbles) style it.
    
        //"+" and it is called the sibling selector.
        //adjacent sibling selector

        //so if two elements are same child, can use + but the thing is if there are bunch of 
        //elements middle of these childs, have to use "~"


        opacity: 0;
        visibility: hidden;
        //That's because if we just set the opacity to zero,

        // then the element will basically still be on the page,

        // but only invisible, but if we set it to visibility hidden

        // as well, well, then it's really gone.


        // So why don't we just use the visibility hidden

        // without the opacity?

        // Well, because we cannot animate the visibility, okay?

        // That's how we use the opacity,
        transform: translateY(-4rem);
    }

    &__radio-group{
        width: 49%;
        display: inline-block;
    }

    &__radio-input{
        display: none;
    }

    &__radio-label{
        font-size: $default-font-size;
        cursor: pointer;
        position: relative;
        padding-left: 4.5rem;

    }
    &__radio-button{
        height: 3rem;
        width: 3rem;
        border: 5px solid $color-primary;
        border-radius: 50%;
        display: inline-block;
        position: absolute;
        left: 0;
        top: -.4rem;


        &::after{
            //::after or before depends on the child, so before is the pefore this element focus.
            // after is after this element
            content: "";
            display: block;
            // And remember, each time that we use a pseudo-element,

            // we have to actually specify its content property.

            // And as always, I set it to empty.

            // And also the display property, and I set it to block here.
          height: 1.3rem;
          width: 1.3rem;
          border-radius: 50%;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%,-50%);
          background-color: $color-primary;
          opacity: 0;
          transition: opacity .2s;

        }
    }
    &__radio-input:checked ~ &__radio-label &__radio-button::after{
        opacity: 1;
    }
}